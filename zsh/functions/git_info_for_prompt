# vim:ft=sh:

local gitdir=$GIT_DIR
if [ -z "$gitdir" ]; then gitdir=.git; fi
local g

pushd -q $PWD
while true; do
  if [ -d "$gitdir" ]; then
    g="$PWD/$gitdir"
    break
  elif [ $PWD = '/' ]; then
    popd -q
    return 0
  else
    cd -q ..
  fi
done
popd -q

local r
local b
if [ -d "$g/../.dotest" ]; then
  if [ -f "$g/../.dotest/rebasing" ]; then
    r="|REBASE"
  elif [ -f "$g/../.dotest/applying" ]; then
    r="|AM"
  else
    r="|AM/REBASE"
  fi
  b="$(git symbolic-ref HEAD 2>/dev/null)"
elif [ -f "$g/.dotest-merge/interactive" ]; then
  r="|REBASE-i"
  b="$(cat "$g/.dotest-merge/head-name")"
elif [ -d "$g/.dotest-merge" ]; then
  r="|REBASE-m"
  b="$(cat "$g/.dotest-merge/head-name")"
elif [ -f "$g/MERGE_HEAD" ]; then
  r="|MERGING"
  b="$(git symbolic-ref HEAD 2>/dev/null)"
else
  if [ -f "$g/BISECT_LOG" ]; then
    r="|BISECTING"
  fi
  # this symbolic-ref call is the most common case
  if ! b="$(git symbolic-ref HEAD 2>/dev/null)"; then
    if ! b="tag: $(git describe --exact-match HEAD 2>/dev/null)"; then
      b="$(cut -c1-7 "$g/HEAD")..."
    fi
  fi
fi

if [ -n "$1" ]; then
  printf " $1" "${b##refs/heads/}$r"
else
  printf " (%s)" "${b##refs/heads/}$r"
fi
